# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

directive @upper on FIELD_DEFINITION

union MovieUnion = Film | Series

type AuthResult {
    accessToken: String!
    refreshToken: String!
}

type Collection {
    cover: Media
    coverId: Float
    createdAt: DateTime!
    description: String
    id: ID!
    isSystem: Boolean!
    movies: [Movie!]!
    name: String!
    updatedAt: DateTime!
}

type CollectionMovie {
    collection: Collection!
    collectionId: ID!
    movie: Movie!
    movieId: ID!
}

type Country {
    currency: Currency!
    currencyId: String!
    id: ID!
    language: Language!
    languageId: String!
    name: String!
}

type Currency {
    id: ID!
    name: String!
    symbol: String!
}

type Episode {
    accessMode: AccessModeEnum!
    ageRestriction: AgeRestrictionEnum
    description: String
    id: ID!
    numberInSeason: Int
    numberInSeries: Int!
    publicationDate: DateTime!
    releaseDate: DateTime
    season: Season
    seasonId: String
    series: Series!
    seriesId: String!
    title: String
    video: Video
    videoId: Float
}

type Film {
    accessMode: AccessModeEnum!
    ageRestriction: AgeRestrictionEnum
    countries: [Country!]!
    cover: Media
    coverId: Float
    createdAt: DateTime!
    description: String
    genres: [Genre!]!
    genresConnection: [MovieGenre!]!
    id: ID!
    movieImages: [MovieImage!]!
    moviePersons: [MoviePerson!]!
    releaseDate: DateTime
    reviews: [MovieReview!]!
    studios: [Studio!]!
    title: String!
    trailers: [Trailer!]!
    type: MovieTypeEnum!
    updatedAt: DateTime!
    video: Video
    videoId: Float
}

type Genre {
    id: ID!
    name: String!
}

type Language {
    id: ID!
    name: String!
}

type Media {
    id: ID!
    publicId: String!
    type: MediaTypeEnum!
    url: String!
}

type Movie {
    accessMode: AccessModeEnum!
    ageRestriction: AgeRestrictionEnum
    countries: [Country!]!
    cover: Media
    coverId: Float
    createdAt: DateTime!
    description: String
    genres: [Genre!]!
    genresConnection: [MovieGenre!]!
    id: ID!
    movieImages: [MovieImage!]!
    moviePersons: [MoviePerson!]!
    reviews: [MovieReview!]!
    studios: [Studio!]!
    title: String!
    trailers: [Trailer!]!
    type: MovieTypeEnum!
    updatedAt: DateTime!
}

type MovieCountry {
    country: Country!
    countryId: ID!
    movie: Movie!
    movieId: ID!
}

type MovieGenre {
    genre: Genre!
    genreId: ID!
    movie: Movie!
    movieId: ID!
}

type MovieImage {
    id: ID!
    image: Media!
    imageId: ID!
    movie: Movie!
    movieId: ID!
    type: MovieImageType
    typeId: Float
}

type MovieImageType {
    id: ID!
    name: String!
}

type MoviePerson {
    id: ID!
    movie: Movie!
    movieId: String!
    person: Person!
    personId: Float!
    role: String
    type: MoviePersonType!
    typeId: Float!
}

type MoviePersonType {
    id: ID!
    name: String!
}

type MovieReview {
    createdAt: DateTime!
    id: ID!
    mark: Int!
    movie: Movie!
    movieId: ID!
    text: String
    updatedAt: DateTime!
    user: User!
    userId: ID!
}

type MovieReviewEdge {
    cursor: String!
    node: MovieReview!
}

type MovieStudio {
    movie: Movie!
    movieId: ID!
    studio: Studio!
    studioId: ID!
}

type MovieUser {
    isBookmarked: Boolean!
    isWatched: Boolean!
    movie: Movie!
    movieId: ID!
    user: User!
    userId: ID!
}

type MovieVisitStatsLastMonth {
    createdAt: DateTime!
    id: Float!
    movie: Movie!
    movieId: String!
}

type Mutation {
    confirmEmail(input: ConfirmEmailInput!): Boolean!
    createCollection(input: CreateCollectionInput!): Collection!
    createCollectionMovie(collectionId: Int!, movieId: String!): CollectionMovie!
    createCountry(input: CreateCountryInput!): Country!
    createCurrency(input: CreateCurrencyInput!): Currency!
    createEpisode(input: CreateEpisodeInput!): Episode!
    createFilm(input: CreateFilmInput!): Film!
    createGenre(input: CreateGenreInput!): Genre!
    createLanguage(input: CreateLanguageInput!): Language!
    createMovieCountry(countryId: String!, movieId: String!): MovieCountry!
    createMovieGenre(genreId: String!, movieId: String!): MovieGenre!
    createMovieImage(input: CreateMovieImageInput!): MovieImage!
    createMovieImageType(input: CreateMovieImageTypeInput!): MovieImageType!
    createMoviePerson(input: CreateMoviePersonInput!): MoviePerson!
    createMoviePersonType(input: CreateMoviePersonTypeInput!): MoviePersonType!
    createMovieReview(input: CreateMovieReviewInput!): MovieReview!
    createMovieStudio(movieId: String!, studioId: Int!): MovieStudio!
    createMovieUser(input: CreateMovieUserInput!): MovieUser!
    createPerson(input: CreatePersonInput!): Person!
    createRoom(input: CreateRoomInput!): Room!
    createRoomParticipant(roomId: String!, userId: String!): RoomParticipant!
    createRoomVideo(input: CreateRoomVideoInput!): RoomVideo!
    createSeason(input: CreateSeasonInput!): Season!
    createSeries(input: CreateSeriesInput!): Series!
    createStudio(input: CreateStudioInput!): Studio!
    createStudioCountry(countryId: String!, studioId: Int!): StudioCountry!
    createSubtitles(input: CreateSubtitlesInput!): Subtitles!
    createTrailer(input: CreateTrailerInput!): Trailer!
    createVideo(input: CreateVideoInput!): Video!
    createVideoVariant(input: CreateVideoVariantInput!): VideoVariant!
    deleteCollection(id: Int!): Collection!
    deleteCollectionMovie(collectionId: Int!, movieId: String!): CollectionMovie!
    deleteCountry(id: String!): Country!
    deleteCurrency(id: String!): Currency!
    deleteEpisode(id: String!): Episode!
    deleteExpiredConfirmations: Boolean!
    deleteFilm(id: String!): Film!
    deleteGenre(id: String!): Genre!
    deleteLanguage(id: String!): Language!
    deleteMedia(id: Float!): Media!
    deleteMovie(id: String!): Movie!
    deleteMovieCountry(countryId: String!, movieId: String!): Movie!
    deleteMovieGenre(genreId: String!, movieId: String!): MovieGenre!
    deleteMovieImage(id: Int!): MovieImage!
    deleteMovieImageType(id: Int!): MovieImageType!
    deleteMoviePerson(id: Int!): MoviePerson!
    deleteMoviePersonType(id: Int!): MoviePersonType!
    deleteMovieReview(id: Int!): MovieReview!
    deleteMovieStudio(movieId: String!, studioId: Int!): MovieStudio!
    deleteMovieUser(movieId: String!, userId: String!): MovieUser!
    deletePerson(id: Int!): Person!
    deleteRoom(id: String!): Room!
    deleteRoomParticipant(roomId: String!, userId: String!): RoomParticipant!
    deleteRoomVideo(roomId: String!, videoId: Int!): RoomVideo!
    deleteSeason(id: String!): Season!
    deleteSeries(id: String!): Series!
    deleteStudio(id: Int!): Studio!
    deleteStudioCountry(countryId: String!, studioId: Int!): StudioCountry!
    deleteSubtitles(id: Int!): Subtitles!
    deleteTrailer(id: Int!): Trailer!
    deleteUser(id: String!): User!
    deleteVideoVariant(id: Float!): VideoVariant!
    increaseMovieVisits(movieId: String!): Boolean!
    login(input: LoginInput!): AuthResult!
    logout: Boolean!
    moveRoomVideo(input: MoveRoomVideoInput!, roomId: String!): RoomVideo!
    refresh: AuthResult!
    register(input: CreateUserInput!): AuthResult!
    removeVideo(id: Int!): Video!
    sendConfirmation: Boolean!
    updateCollection(id: Int!, input: UpdateCollectionInput!): Collection!
    updateCountry(id: String!, input: UpdateCountryInput!): Country!
    updateCurrency(id: String!, input: UpdateCurrencyInput!): Currency!
    updateEpisode(id: String!, input: UpdateEpisodeInput!): Episode!
    updateFilm(id: String!, input: UpdateFilmInput!): Film!
    updateGenre(id: String!, input: UpdateGenreInput!): Genre!
    updateLanguage(id: String!, input: UpdateLanguageInput!): Language!
    updateLastMonthView: Boolean!
    updateMovieImage(id: Int!, input: UpdateMovieImageInput!): MovieImage!
    updateMovieImageType(id: Int!, input: UpdateMovieImageTypeInput!): MovieImageType!
    updateMoviePerson(id: Int!, input: UpdateMoviePersonInput!): MoviePerson!
    updateMoviePersonType(id: Int!, input: UpdateMoviePersonTypeInput!): MoviePersonType!
    updateMovieReview(id: Int!, input: UpdateMovieReviewInput!): MovieReview!
    updateMovieUser(input: UpdateMovieUserInput!, movieId: String!, userId: String!): MovieUser!
    updatePerson(id: Int!, input: UpdatePersonInput!): Person!
    updateRoom(id: String!, input: UpdateRoomInput!): Room!
    updateSeason(id: String!, input: UpdateSeasonInput!): Season!
    updateSeries(id: String!, input: UpdateSeriesInput!): Series!
    updateStudio(id: Int!, input: UpdateStudioInput!): Studio!
    updateSubtitles(id: Int!, input: UpdateSubtitlesInput!): Subtitles!
    updateTrailer(id: Int!, input: UpdateTrailerInput!): Trailer!
    updateUser(id: String!, input: UpdateUserInput!): User!
    updateVideoVariant(id: Int!, input: UpdateVideoVariantInput!): VideoVariant!
    uploadMedia(input: CreateMediaInput!): Media!
}

type OffsetPageInfo {
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    totalCount: Float!
}

type PaginatedCollections {
    nodes: [Collection!]!
    pageInfo: OffsetPageInfo!
}

type PaginatedCountries {
    nodes: [Country!]!
    pageInfo: OffsetPageInfo!
}

type PaginatedCurrencies {
    nodes: [Currency!]!
    pageInfo: OffsetPageInfo!
}

type PaginatedEpisodes {
    nodes: [Episode!]!
    pageInfo: OffsetPageInfo!
}

type PaginatedFilms {
    nodes: [Film!]!
    pageInfo: OffsetPageInfo!
}

type PaginatedGenres {
    nodes: [Genre!]!
    pageInfo: OffsetPageInfo!
}

type PaginatedLanguages {
    nodes: [Language!]!
    pageInfo: OffsetPageInfo!
}

type PaginatedMedia {
    nodes: [Media!]!
    pageInfo: OffsetPageInfo!
}

type PaginatedMovieImageTypes {
    nodes: [MovieImageType!]!
    pageInfo: OffsetPageInfo!
}

type PaginatedMoviePersonTypes {
    nodes: [MoviePersonType!]!
    pageInfo: OffsetPageInfo!
}

type PaginatedMoviesImages {
    nodes: [MovieImage!]!
    pageInfo: OffsetPageInfo!
}

type PaginatedMoviesPersons {
    nodes: [MoviePerson!]!
    pageInfo: OffsetPageInfo!
}

type PaginatedMoviesReviews {
    edges: [MovieReviewEdge!]!
    pageInfo: RelayPageInfo!
}

type PaginatedMoviesUnion {
    nodes: [MovieUnion!]!
    pageInfo: OffsetPageInfo!
}

type PaginatedMoviesUsers {
    nodes: [MovieUser!]!
    pageInfo: OffsetPageInfo!
}

type PaginatedMoviesVisits {
    nodes: [MovieVisitStatsLastMonth!]!
    pageInfo: OffsetPageInfo!
}

type PaginatedPersons {
    nodes: [Person!]!
    pageInfo: OffsetPageInfo!
}

type PaginatedRooms {
    nodes: [Room!]!
    pageInfo: OffsetPageInfo!
}

type PaginatedRoomsVideos {
    nodes: [RoomVideo!]!
    pageInfo: OffsetPageInfo!
}

type PaginatedSeasons {
    nodes: [Season!]!
    pageInfo: OffsetPageInfo!
}

type PaginatedSeries {
    nodes: [Series!]!
    pageInfo: OffsetPageInfo!
}

type PaginatedStudios {
    nodes: [Studio!]!
    pageInfo: OffsetPageInfo!
}

type PaginatedTrailers {
    nodes: [Trailer!]!
    pageInfo: OffsetPageInfo!
}

type PaginatedUsers {
    nodes: [User!]!
    pageInfo: OffsetPageInfo!
}

type PaginatedVideos {
    nodes: [Video!]!
    pageInfo: OffsetPageInfo!
}

type Person {
    country: Country
    countryId: String
    id: ID!
    image: Media
    imageId: String
    name: String!
}

type Query {
    getCollection(id: Int!): Collection!
    getCollections(filter: CollectionFilter, limit: Int! = 20, offset: Int! = 0, sort: CollectionSort): PaginatedCollections!
    getCountries(filter: CountryFilter, limit: Int! = 20, offset: Int! = 0, sort: CountrySort): PaginatedCountries!
    getCountry(id: String!): Country!
    getCurrencies(filter: CurrencyFilter, limit: Int! = 20, offset: Int! = 0, sort: CurrencySort): PaginatedCurrencies!
    getCurrency(id: String!): Currency!
    getEpisode(id: String!): Episode!
    getEpisodes(filter: EpisodeFilter, limit: Int! = 20, offset: Int! = 0, sort: EpisodeSort): PaginatedEpisodes!
    getEpisodesProtected(filter: EpisodeFilter, limit: Int! = 20, offset: Int! = 0, sort: EpisodeSort): PaginatedEpisodes!
    getFilm(id: String!): Film!
    getFilms(filter: FilmFilter, limit: Int! = 20, offset: Int! = 0, sort: FilmSort): PaginatedFilms!
    getFilmsProtected(filter: FilmFilter, limit: Int! = 20, offset: Int! = 0, sort: FilmSort): PaginatedFilms!
    getGenre(id: String!): Genre!
    getGenres(filter: GenreFilter, limit: Int! = 20, offset: Int! = 0, sort: GenreSort): PaginatedGenres!
    getLanguage(id: String!): Language!
    getLanguages(filter: LanguageFilter, limit: Int! = 20, offset: Int! = 0, sort: LanguageSort): PaginatedLanguages!
    getLastMonthMoviesVisits(filter: MovieVisitStatsLastMonthFilter, limit: Int! = 20, offset: Int! = 0, sort: MovieVisitStatsLastMonthSort): PaginatedMoviesVisits!
    getManyMedia(filter: MediaFilter, limit: Int! = 20, offset: Int! = 0, sort: MediaSort): PaginatedMedia!
    getManySeries(filter: SeriesFilter, limit: Int! = 20, offset: Int! = 0, sort: SeriesSort): PaginatedSeries!
    getManySeriesProtected(filter: SeriesFilter, limit: Int! = 20, offset: Int! = 0, sort: SeriesSort): PaginatedSeries!
    getManySubtitles: [Subtitles!]!
    getMe: User
    getMostPopularMovies(limit: Int! = 20, offset: Int! = 0): [MovieUnion!]!
    getMovie(id: String!): Movie!
    getMovieImage(id: Int!): MovieImage!
    getMovieImageType(id: Int!): MovieImageType!
    getMovieImageTypes(filter: MovieImageTypeFilter, limit: Int! = 20, offset: Int! = 0, sort: MovieImageTypeSort): PaginatedMovieImageTypes!
    getMoviePerson(id: Int!): MoviePerson!
    getMoviePersonType(id: Int!): MoviePersonType!
    getMoviePersonTypes(filter: MoviePersonTypeFilter, limit: Int! = 20, offset: Int! = 0, sort: MoviePersonTypeSort): PaginatedMoviePersonTypes!
    getMovieReview(id: Int!): MovieReview!
    getMovieUser(movieId: String!, userId: String!): MovieUser!
    getMovies(filter: MovieFilter, limit: Int! = 20, offset: Int! = 0, sort: MovieSort): PaginatedMoviesUnion!
    getMoviesImages(filter: MovieImageFilter, limit: Int! = 20, offset: Int! = 0, sort: MovieImageSort): PaginatedMoviesImages!
    getMoviesPersons(filter: MoviePersonFilter, limit: Int! = 20, offset: Int! = 0, sort: MoviePersonSort): PaginatedMoviesPersons!
    getMoviesProtected(filter: MovieFilter, limit: Int! = 20, offset: Int! = 0, sort: MovieSort): PaginatedMoviesUnion!
    getMoviesReviews(after: String, before: String, filter: MovieReviewFilter, first: Int, last: Int, sort: MovieReviewSort): PaginatedMoviesReviews!
    getMoviesUsers(filter: MovieUserFilter, limit: Int! = 20, offset: Int! = 0, sort: MovieUserSort): PaginatedMoviesUsers!
    getOneMedia(id: Float!): Media!
    getOneSeries(id: String!): Series!
    getOneSubtitles(id: Int!): Subtitles!
    getPerson(id: Int!): Person!
    getPersons(filter: PersonFilter, limit: Int! = 20, offset: Int! = 0, sort: PersonSort): PaginatedPersons!
    getRoom(id: String!): Room!
    getRooms(filter: RoomFilter, limit: Int! = 20, offset: Int! = 0, sort: RoomSort): PaginatedRooms!
    getRoomsVideos(filter: RoomVideoFilter, limit: Int! = 20, offset: Int! = 0, sort: RoomVideoSort): PaginatedRoomsVideos!
    getSeason(id: String!): Season!
    getSeasons(filter: SeasonFilter, limit: Int! = 20, offset: Int! = 0, sort: SeasonSort): PaginatedSeasons!
    getSeasonsProtected(filter: SeasonFilter, limit: Int! = 20, offset: Int! = 0, sort: SeasonSort): PaginatedSeasons!
    getStudio(id: Int!): Studio!
    getStudios(filter: StudioFilter, limit: Int! = 20, offset: Int! = 0, sort: StudioSort): PaginatedStudios!
    getTrailer(id: Int!): Trailer!
    getTrailers(filter: TrailerFilter, limit: Int! = 20, offset: Int! = 0, sort: TrailerSort): PaginatedTrailers!
    getUser(id: String!): User!
    getUsers(filter: UserFilter, limit: Int! = 20, offset: Int! = 0, sort: UserSort): PaginatedUsers!
    getVideo(id: Int!): Video!
    getVideoVariant(id: Int!): VideoVariant!
    getVideos(filter: VideoFilter, limit: Int! = 20, offset: Int! = 0, sort: VideoSort): PaginatedVideos!
    getVideosVariants: [VideoVariant!]!
    roomVideo(roomId: String!, videoId: Int!): RoomVideo!
}

type RelayPageInfo {
    endCursor: String
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    startCursor: String
}

type Room {
    id: ID!
    inviteKey: String
    name: String!
    owner: User!
    ownerId: String!
    participants: [User!]!
    videos: [Video!]!
}

type RoomParticipant {
    room: Room!
    roomId: ID!
    user: User!
    userId: ID!
}

type RoomVideo {
    order: Int!
    room: Room!
    roomId: ID!
    video: Video!
    videoId: ID!
}

type Season {
    accessMode: AccessModeEnum!
    ageRestriction: AgeRestrictionEnum
    createdAt: DateTime!
    description: String
    endReleaseDate: DateTime
    episodes: [Episode!]!
    episodesCount: Int!
    id: ID!
    numberInSeries: Int!
    series: Series!
    seriesId: String!
    startReleaseDate: DateTime
    title: String
    updatedAt: DateTime!
}

type Series {
    accessMode: AccessModeEnum!
    ageRestriction: AgeRestrictionEnum
    countries: [Country!]!
    cover: Media
    coverId: Float
    createdAt: DateTime!
    description: String
    endReleaseDate: DateTime
    episodes: [Episode!]!
    genres: [Genre!]!
    genresConnection: [MovieGenre!]!
    id: ID!
    movieImages: [MovieImage!]!
    moviePersons: [MoviePerson!]!
    reviews: [MovieReview!]!
    seasons: [Season!]!
    startReleaseDate: DateTime
    studios: [Studio!]!
    title: String!
    trailers: [Trailer!]!
    type: MovieTypeEnum!
    updatedAt: DateTime!
}

type Studio {
    countries: [Country!]!
    id: ID!
    name: String!
}

type StudioCountry {
    country: Country!
    countryId: ID!
    studio: Studio!
    studioId: ID!
}

type Subtitles {
    file: Media!
    fileId: Int!
    id: Float!
    language: Language!
    languageId: String!
    video: Video!
    videoId: Int!
}

type Trailer {
    createdAt: DateTime!
    id: ID!
    movie: Movie!
    movieId: String!
    title: String
    video: Video!
    videoId: Float!
}

type User {
    avatar: Media
    avatarId: Float
    country: Country
    countryId: String
    createdAt: DateTime!
    email: String!
    id: ID!
    isEmailConfirmed: Boolean!
    name: String!
    role: RoleEnum!
    updatedAt: DateTime!
}

type Video {
    id: ID!
    subtitles: [Subtitles!]!
    variants: [VideoVariant!]!
}

type VideoVariant {
    file: Media!
    fileId: Int!
    id: Float!
    language: Language!
    languageId: String!
    quality: VideoQualityEnum!
    video: Video!
    videoId: Int!
}

enum AccessModeEnum {
    PRIVATE
    PUBLIC
}

"Movies age restrictions in MPAA system"
enum AgeRestrictionEnum {
    G
    NC17
    PG
    PG13
    R
}

enum MediaTypeEnum {
    IMAGE
    SUBTITLES
    VIDEO
}

enum MovieTypeEnum {
    Film
    Series
}

"User role in app"
enum RoleEnum {
    Admin
    Moderator
    User
}

enum SortDirectionEnum {
    ASC
    DESC
    asc
    desc
}

enum SortNullsEnum {
    FIRST
    LAST
    first
    last
}

enum VideoQualityEnum {
    QUALITY_1080p
    QUALITY_240p
    QUALITY_360p
    QUALITY_720p
}

"A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format."
scalar DateTime

"The `Upload` scalar type represents a file upload."
scalar Upload

input AccessModeEnumFilter {
    eq: AccessModeEnum
    in: [AccessModeEnum!]
    neq: AccessModeEnum
    nin: [AccessModeEnum!]
}

input AgeRestrictionEnumFilter {
    eq: AgeRestrictionEnum
    in: [AgeRestrictionEnum!]
    neq: AgeRestrictionEnum
    nin: [AgeRestrictionEnum!]
}

input BooleanFilter {
    eq: Boolean
    neq: Boolean
}

input CollectionFilter {
    and: [CollectionFilter!]
    coverId: NumberFilter
    createdAt: DateFilter
    description: StringFilter
    id: IDFilter
    isSystem: BooleanFilter
    name: StringFilter
    or: [CollectionFilter!]
    updatedAt: DateFilter
}

input CollectionSort {
    coverId: SortOptions
    createdAt: SortOptions
    description: SortOptions
    id: SortOptions
    isSystem: SortOptions
    name: SortOptions
    updatedAt: SortOptions
}

input ConfirmEmailInput {
    email: String!
    token: String!
}

input CountryFilter {
    and: [CountryFilter!]
    currency: CurrencyEntity_CountryFilter
    currencyId: StringFilter
    id: IDFilter
    language: LanguageEntity_CountryFilter
    languageId: StringFilter
    name: StringFilter
    or: [CountryFilter!]
}

input CountrySort {
    currency: CurrencyEntity_CountrySort
    currencyId: SortOptions
    id: SortOptions
    language: LanguageEntity_CountrySort
    languageId: SortOptions
    name: SortOptions
}

input CreateCollectionInput {
    coverId: Float
    description: String
    isSystem: Boolean
    moviesIds: [String!]
    name: String!
}

input CreateCountryInput {
    currencyId: String!
    id: String!
    languageId: String!
    name: String!
}

input CreateCurrencyInput {
    id: String!
    name: String!
    symbol: String!
}

input CreateEpisodeInput {
    accessMode: AccessModeEnum
    ageRestriction: AgeRestrictionEnum
    description: String
    numberInSeason: Float
    numberInSeries: Float!
    releaseDate: DateTime
    seasonId: String
    seriesId: String!
    title: String
    videoId: Float
}

input CreateFilmInput {
    accessMode: AccessModeEnum!
    ageRestriction: AgeRestrictionEnum
    countriesIds: [String!]
    coverId: Float
    description: String
    genresIds: [String!]
    releaseDate: DateTime
    studiosIds: [Int!]
    title: String!
    videoId: Float
}

input CreateGenreInput {
    name: String!
}

input CreateLanguageInput {
    id: String!
    name: String!
}

input CreateMediaInput {
    file: Upload!
    type: MediaTypeEnum!
}

input CreateMovieImageInput {
    imageId: Float!
    movieId: String!
    typeId: Float!
}

input CreateMovieImageTypeInput {
    name: String!
}

input CreateMoviePersonInput {
    movieId: String!
    personId: Int!
    role: String
    typeId: Int!
}

input CreateMoviePersonTypeInput {
    name: String!
}

input CreateMovieReviewInput {
    mark: Int!
    movieId: String!
    text: String
}

input CreateMovieUserInput {
    isBookmarked: Boolean!
    isWatched: Boolean!
    movieId: ID!
}

input CreatePersonInput {
    countryId: String
    imageId: String
    name: String!
}

input CreateRoomInput {
    name: String!
}

input CreateRoomVideoInput {
    roomId: String!
    videoId: Int!
}

input CreateSeasonInput {
    accessMode: AccessModeEnum
    ageRestriction: AgeRestrictionEnum
    description: String
    endReleaseDate: DateTime
    numberInSeries: Float!
    seriesId: String!
    startReleaseDate: DateTime
    title: String
}

input CreateSeriesInput {
    accessMode: AccessModeEnum!
    ageRestriction: AgeRestrictionEnum
    countriesIds: [String!]
    coverId: Float
    description: String
    endReleaseDate: DateTime
    genresIds: [String!]
    startReleaseDate: DateTime
    studiosIds: [Int!]
    title: String!
}

input CreateStudioInput {
    countriesIds: [String!]
    name: String!
}

input CreateSubtitlesInput {
    fileId: Int!
    languageId: String!
    videoId: Int!
}

input CreateTrailerInput {
    movieId: String!
    title: String
    videoId: Float!
}

input CreateUserInput {
    email: String!
    name: String!
    password: String!
}

input CreateVideoInput {
    subtitles: [Video_CreateSubtitlesInput!]!
    variants: [Video_CreateVideoVariantInput!]!
}

input CreateVideoVariantInput {
    fileId: Int!
    languageId: String!
    quality: VideoQualityEnum!
    videoId: Int!
}

input CurrencyEntity_CountryFilter {
    and: [CurrencyEntity_CountryFilter!]
    id: IDFilter
    name: StringFilter
    or: [CurrencyEntity_CountryFilter!]
    symbol: StringFilter
}

input CurrencyEntity_CountrySort {
    id: SortOptions
    name: SortOptions
    symbol: SortOptions
}

input CurrencyFilter {
    and: [CurrencyFilter!]
    id: IDFilter
    name: StringFilter
    or: [CurrencyFilter!]
    symbol: StringFilter
}

input CurrencySort {
    id: SortOptions
    name: SortOptions
    symbol: SortOptions
}

input DateBetween {
    end: DateTime!
    start: DateTime!
}

input DateFilter {
    btwn: DateBetween
    eq: DateTime
    gt: DateTime
    gte: DateTime
    in: [DateTime!]
    lt: DateTime
    lte: DateTime
    nbtwn: DateBetween
    neq: DateTime
    nin: [DateTime!]
}

input EpisodeFilter {
    accessMode: AccessModeEnumFilter
    ageRestriction: AgeRestrictionEnumFilter
    and: [EpisodeFilter!]
    description: StringFilter
    id: IDFilter
    numberInSeason: IntFilter
    numberInSeries: IntFilter
    or: [EpisodeFilter!]
    publicationDate: DateFilter
    releaseDate: DateFilter
    seasonId: StringFilter
    seriesId: StringFilter
    title: StringFilter
    videoId: NumberFilter
}

input EpisodeSort {
    accessMode: SortOptions
    ageRestriction: SortOptions
    description: SortOptions
    id: SortOptions
    numberInSeason: SortOptions
    numberInSeries: SortOptions
    publicationDate: SortOptions
    releaseDate: SortOptions
    seasonId: SortOptions
    seriesId: SortOptions
    title: SortOptions
    videoId: SortOptions
}

input FilmFilter {
    accessMode: AccessModeEnumFilter
    ageRestriction: AgeRestrictionEnumFilter
    and: [FilmFilter!]
    cover: MediaEntity_FilmFilter
    coverId: NumberFilter
    createdAt: DateFilter
    description: StringFilter
    genresConnection: MovieGenreEntity_FilmFilter
    id: IDFilter
    or: [FilmFilter!]
    releaseDate: DateFilter
    title: StringFilter
    updatedAt: DateFilter
    videoId: NumberFilter
}

input FilmSort {
    accessMode: SortOptions
    ageRestriction: SortOptions
    cover: MediaEntity_FilmSort
    coverId: SortOptions
    createdAt: SortOptions
    description: SortOptions
    genresConnection: MovieGenreEntity_FilmSort
    id: SortOptions
    releaseDate: SortOptions
    title: SortOptions
    updatedAt: SortOptions
    videoId: SortOptions
}

input GenreFilter {
    and: [GenreFilter!]
    id: IDFilter
    name: StringFilter
    or: [GenreFilter!]
}

input GenreSort {
    id: SortOptions
    name: SortOptions
}

input IDBetween {
    end: ID!
    start: ID!
}

input IDFilter {
    btwn: IDBetween
    eq: ID
    gt: ID
    gte: ID
    ilike: ID
    in: [ID!]
    like: ID
    lt: ID
    lte: ID
    nbtwn: IDBetween
    neq: ID
    nilike: ID
    nin: [ID!]
    nlike: ID
}

input IntBetween {
    end: Int!
    start: Int!
}

input IntFilter {
    btwn: IntBetween
    eq: Int
    gt: Int
    gte: Int
    in: [Int!]
    lt: Int
    lte: Int
    nbtwn: IntBetween
    neq: Int
    nin: [Int!]
}

input LanguageEntity_CountryFilter {
    and: [LanguageEntity_CountryFilter!]
    id: IDFilter
    name: StringFilter
    or: [LanguageEntity_CountryFilter!]
}

input LanguageEntity_CountrySort {
    id: SortOptions
    name: SortOptions
}

input LanguageFilter {
    and: [LanguageFilter!]
    id: IDFilter
    name: StringFilter
    or: [LanguageFilter!]
}

input LanguageSort {
    id: SortOptions
    name: SortOptions
}

input LoginInput {
    email: String!
    password: String!
}

input MediaEntity_FilmFilter {
    and: [MediaEntity_FilmFilter!]
    id: IDFilter
    or: [MediaEntity_FilmFilter!]
    publicId: StringFilter
    type: MediaTypeEnumFilter
    url: StringFilter
}

input MediaEntity_FilmSort {
    id: SortOptions
    publicId: SortOptions
    type: SortOptions
    url: SortOptions
}

input MediaEntity_MovieFilter {
    and: [MediaEntity_MovieFilter!]
    id: IDFilter
    or: [MediaEntity_MovieFilter!]
    publicId: StringFilter
    type: MediaTypeEnumFilter
    url: StringFilter
}

input MediaEntity_MovieSort {
    id: SortOptions
    publicId: SortOptions
    type: SortOptions
    url: SortOptions
}

input MediaEntity_SeriesFilter {
    and: [MediaEntity_SeriesFilter!]
    id: IDFilter
    or: [MediaEntity_SeriesFilter!]
    publicId: StringFilter
    type: MediaTypeEnumFilter
    url: StringFilter
}

input MediaEntity_SeriesSort {
    id: SortOptions
    publicId: SortOptions
    type: SortOptions
    url: SortOptions
}

input MediaFilter {
    and: [MediaFilter!]
    id: IDFilter
    or: [MediaFilter!]
    publicId: StringFilter
    type: MediaTypeEnumFilter
    url: StringFilter
}

input MediaSort {
    id: SortOptions
    publicId: SortOptions
    type: SortOptions
    url: SortOptions
}

input MediaTypeEnumFilter {
    eq: MediaTypeEnum
    in: [MediaTypeEnum!]
    neq: MediaTypeEnum
    nin: [MediaTypeEnum!]
}

input MoveRoomVideoInput {
    newOrder: Int!
    oldOrder: Int!
}

input MovieEntity_MovieImageFilter {
    accessMode: AccessModeEnumFilter
    ageRestriction: AgeRestrictionEnumFilter
    and: [MovieEntity_MovieImageFilter!]
    coverId: NumberFilter
    createdAt: DateFilter
    description: StringFilter
    endReleaseDate: DateFilter
    id: IDFilter
    or: [MovieEntity_MovieImageFilter!]
    releaseDate: DateFilter
    startReleaseDate: DateFilter
    title: StringFilter
    updatedAt: DateFilter
    videoId: NumberFilter
}

input MovieEntity_MovieImageSort {
    accessMode: SortOptions
    ageRestriction: SortOptions
    coverId: SortOptions
    createdAt: SortOptions
    description: SortOptions
    endReleaseDate: SortOptions
    id: SortOptions
    releaseDate: SortOptions
    startReleaseDate: SortOptions
    title: SortOptions
    updatedAt: SortOptions
    videoId: SortOptions
}

input MovieEntity_MoviePersonFilter {
    accessMode: AccessModeEnumFilter
    ageRestriction: AgeRestrictionEnumFilter
    and: [MovieEntity_MoviePersonFilter!]
    coverId: NumberFilter
    createdAt: DateFilter
    description: StringFilter
    endReleaseDate: DateFilter
    id: IDFilter
    or: [MovieEntity_MoviePersonFilter!]
    releaseDate: DateFilter
    startReleaseDate: DateFilter
    title: StringFilter
    updatedAt: DateFilter
    videoId: NumberFilter
}

input MovieEntity_MoviePersonSort {
    accessMode: SortOptions
    ageRestriction: SortOptions
    coverId: SortOptions
    createdAt: SortOptions
    description: SortOptions
    endReleaseDate: SortOptions
    id: SortOptions
    releaseDate: SortOptions
    startReleaseDate: SortOptions
    title: SortOptions
    updatedAt: SortOptions
    videoId: SortOptions
}

input MovieEntity_MovieReviewFilter {
    accessMode: AccessModeEnumFilter
    ageRestriction: AgeRestrictionEnumFilter
    and: [MovieEntity_MovieReviewFilter!]
    coverId: NumberFilter
    createdAt: DateFilter
    description: StringFilter
    endReleaseDate: DateFilter
    id: IDFilter
    or: [MovieEntity_MovieReviewFilter!]
    releaseDate: DateFilter
    startReleaseDate: DateFilter
    title: StringFilter
    updatedAt: DateFilter
    videoId: NumberFilter
}

input MovieEntity_MovieReviewSort {
    accessMode: SortOptions
    ageRestriction: SortOptions
    coverId: SortOptions
    createdAt: SortOptions
    description: SortOptions
    endReleaseDate: SortOptions
    id: SortOptions
    releaseDate: SortOptions
    startReleaseDate: SortOptions
    title: SortOptions
    updatedAt: SortOptions
    videoId: SortOptions
}

input MovieEntity_MovieVisitStatsLastMonthFilter {
    accessMode: AccessModeEnumFilter
    ageRestriction: AgeRestrictionEnumFilter
    and: [MovieEntity_MovieVisitStatsLastMonthFilter!]
    coverId: NumberFilter
    createdAt: DateFilter
    description: StringFilter
    endReleaseDate: DateFilter
    id: IDFilter
    or: [MovieEntity_MovieVisitStatsLastMonthFilter!]
    releaseDate: DateFilter
    startReleaseDate: DateFilter
    title: StringFilter
    updatedAt: DateFilter
    videoId: NumberFilter
}

input MovieEntity_MovieVisitStatsLastMonthSort {
    accessMode: SortOptions
    ageRestriction: SortOptions
    coverId: SortOptions
    createdAt: SortOptions
    description: SortOptions
    endReleaseDate: SortOptions
    id: SortOptions
    releaseDate: SortOptions
    startReleaseDate: SortOptions
    title: SortOptions
    updatedAt: SortOptions
    videoId: SortOptions
}

input MovieFilter {
    accessMode: AccessModeEnumFilter
    ageRestriction: AgeRestrictionEnumFilter
    and: [MovieFilter!]
    cover: MediaEntity_MovieFilter
    coverId: NumberFilter
    createdAt: DateFilter
    description: StringFilter
    endReleaseDate: DateFilter
    genresConnection: MovieGenreEntity_MovieFilter
    id: IDFilter
    or: [MovieFilter!]
    releaseDate: DateFilter
    startReleaseDate: DateFilter
    title: StringFilter
    updatedAt: DateFilter
    videoId: NumberFilter
}

input MovieGenreEntity_FilmFilter {
    and: [MovieGenreEntity_FilmFilter!]
    genreId: IDFilter
    movieId: IDFilter
    or: [MovieGenreEntity_FilmFilter!]
}

input MovieGenreEntity_FilmSort {
    genreId: SortOptions
    movieId: SortOptions
}

input MovieGenreEntity_MovieFilter {
    and: [MovieGenreEntity_MovieFilter!]
    genreId: IDFilter
    movieId: IDFilter
    or: [MovieGenreEntity_MovieFilter!]
}

input MovieGenreEntity_MovieSort {
    genreId: SortOptions
    movieId: SortOptions
}

input MovieGenreEntity_SeriesFilter {
    and: [MovieGenreEntity_SeriesFilter!]
    genreId: IDFilter
    movieId: IDFilter
    or: [MovieGenreEntity_SeriesFilter!]
}

input MovieGenreEntity_SeriesSort {
    genreId: SortOptions
    movieId: SortOptions
}

input MovieImageFilter {
    and: [MovieImageFilter!]
    id: IDFilter
    imageId: IDFilter
    movie: MovieEntity_MovieImageFilter
    movieId: IDFilter
    or: [MovieImageFilter!]
    type: MovieImageTypeEntity_MovieImageFilter
    typeId: NumberFilter
}

input MovieImageSort {
    id: SortOptions
    imageId: SortOptions
    movie: MovieEntity_MovieImageSort
    movieId: SortOptions
    type: MovieImageTypeEntity_MovieImageSort
    typeId: SortOptions
}

input MovieImageTypeEntity_MovieImageFilter {
    and: [MovieImageTypeEntity_MovieImageFilter!]
    id: IDFilter
    name: StringFilter
    or: [MovieImageTypeEntity_MovieImageFilter!]
}

input MovieImageTypeEntity_MovieImageSort {
    id: SortOptions
    name: SortOptions
}

input MovieImageTypeFilter {
    and: [MovieImageTypeFilter!]
    id: IDFilter
    name: StringFilter
    or: [MovieImageTypeFilter!]
}

input MovieImageTypeSort {
    id: SortOptions
    name: SortOptions
}

input MoviePersonFilter {
    and: [MoviePersonFilter!]
    id: IDFilter
    movie: MovieEntity_MoviePersonFilter
    movieId: StringFilter
    or: [MoviePersonFilter!]
    personId: NumberFilter
    role: StringFilter
    type: MoviePersonTypeEntity_MoviePersonFilter
    typeId: NumberFilter
}

input MoviePersonSort {
    id: SortOptions
    movie: MovieEntity_MoviePersonSort
    movieId: SortOptions
    personId: SortOptions
    role: SortOptions
    type: MoviePersonTypeEntity_MoviePersonSort
    typeId: SortOptions
}

input MoviePersonTypeEntity_MoviePersonFilter {
    and: [MoviePersonTypeEntity_MoviePersonFilter!]
    id: IDFilter
    name: StringFilter
    or: [MoviePersonTypeEntity_MoviePersonFilter!]
}

input MoviePersonTypeEntity_MoviePersonSort {
    id: SortOptions
    name: SortOptions
}

input MoviePersonTypeFilter {
    and: [MoviePersonTypeFilter!]
    id: IDFilter
    name: StringFilter
    or: [MoviePersonTypeFilter!]
}

input MoviePersonTypeSort {
    id: SortOptions
    name: SortOptions
}

input MovieReviewFilter {
    and: [MovieReviewFilter!]
    createdAt: DateFilter
    id: IDFilter
    mark: IntFilter
    movie: MovieEntity_MovieReviewFilter
    movieId: IDFilter
    or: [MovieReviewFilter!]
    text: StringFilter
    updatedAt: DateFilter
    userId: IDFilter
}

input MovieReviewSort {
    createdAt: SortOptions
    id: SortOptions
    mark: SortOptions
    movie: MovieEntity_MovieReviewSort
    movieId: SortOptions
    text: SortOptions
    updatedAt: SortOptions
    userId: SortOptions
}

input MovieSort {
    accessMode: SortOptions
    ageRestriction: SortOptions
    cover: MediaEntity_MovieSort
    coverId: SortOptions
    createdAt: SortOptions
    description: SortOptions
    endReleaseDate: SortOptions
    genresConnection: MovieGenreEntity_MovieSort
    id: SortOptions
    releaseDate: SortOptions
    startReleaseDate: SortOptions
    title: SortOptions
    updatedAt: SortOptions
    videoId: SortOptions
}

input MovieUserFilter {
    and: [MovieUserFilter!]
    isBookmarked: BooleanFilter
    isWatched: BooleanFilter
    movieId: IDFilter
    or: [MovieUserFilter!]
    userId: IDFilter
}

input MovieUserSort {
    isBookmarked: SortOptions
    isWatched: SortOptions
    movieId: SortOptions
    userId: SortOptions
}

input MovieVisitStatsLastMonthFilter {
    and: [MovieVisitStatsLastMonthFilter!]
    createdAt: DateFilter
    movie: MovieEntity_MovieVisitStatsLastMonthFilter
    movieId: StringFilter
    or: [MovieVisitStatsLastMonthFilter!]
}

input MovieVisitStatsLastMonthSort {
    createdAt: SortOptions
    movie: MovieEntity_MovieVisitStatsLastMonthSort
    movieId: SortOptions
}

input NumberFilter {
    eq: Float
    in: [Float!]
    neq: Float
    nin: [Float!]
}

input PersonFilter {
    and: [PersonFilter!]
    countryId: StringFilter
    id: IDFilter
    imageId: StringFilter
    name: StringFilter
    or: [PersonFilter!]
}

input PersonSort {
    countryId: SortOptions
    id: SortOptions
    imageId: SortOptions
    name: SortOptions
}

input RoleEnumFilter {
    eq: RoleEnum
    in: [RoleEnum!]
    neq: RoleEnum
    nin: [RoleEnum!]
}

input RoomFilter {
    and: [RoomFilter!]
    id: IDFilter
    inviteKey: StringFilter
    name: StringFilter
    or: [RoomFilter!]
    ownerId: StringFilter
}

input RoomSort {
    id: SortOptions
    inviteKey: SortOptions
    name: SortOptions
    ownerId: SortOptions
}

input RoomVideoFilter {
    and: [RoomVideoFilter!]
    or: [RoomVideoFilter!]
    roomId: IDFilter
    videoId: IDFilter
}

input RoomVideoSort {
    roomId: SortOptions
    videoId: SortOptions
}

input SeasonFilter {
    accessMode: AccessModeEnumFilter
    ageRestriction: AgeRestrictionEnumFilter
    and: [SeasonFilter!]
    createdAt: DateFilter
    description: StringFilter
    endReleaseDate: DateFilter
    id: IDFilter
    numberInSeries: IntFilter
    or: [SeasonFilter!]
    series: SeriesEntity_SeasonFilter
    seriesId: StringFilter
    startReleaseDate: DateFilter
    title: StringFilter
    updatedAt: DateFilter
}

input SeasonSort {
    accessMode: SortOptions
    ageRestriction: SortOptions
    createdAt: SortOptions
    description: SortOptions
    endReleaseDate: SortOptions
    id: SortOptions
    numberInSeries: SortOptions
    series: SeriesEntity_SeasonSort
    seriesId: SortOptions
    startReleaseDate: SortOptions
    title: SortOptions
    updatedAt: SortOptions
}

input SeriesEntity_SeasonFilter {
    accessMode: AccessModeEnumFilter
    ageRestriction: AgeRestrictionEnumFilter
    and: [SeriesEntity_SeasonFilter!]
    coverId: NumberFilter
    createdAt: DateFilter
    description: StringFilter
    endReleaseDate: DateFilter
    id: IDFilter
    or: [SeriesEntity_SeasonFilter!]
    releaseDate: DateFilter
    startReleaseDate: DateFilter
    title: StringFilter
    updatedAt: DateFilter
    videoId: NumberFilter
}

input SeriesEntity_SeasonSort {
    accessMode: SortOptions
    ageRestriction: SortOptions
    coverId: SortOptions
    createdAt: SortOptions
    description: SortOptions
    endReleaseDate: SortOptions
    id: SortOptions
    releaseDate: SortOptions
    startReleaseDate: SortOptions
    title: SortOptions
    updatedAt: SortOptions
    videoId: SortOptions
}

input SeriesFilter {
    accessMode: AccessModeEnumFilter
    ageRestriction: AgeRestrictionEnumFilter
    and: [SeriesFilter!]
    cover: MediaEntity_SeriesFilter
    coverId: NumberFilter
    createdAt: DateFilter
    description: StringFilter
    endReleaseDate: DateFilter
    genresConnection: MovieGenreEntity_SeriesFilter
    id: IDFilter
    or: [SeriesFilter!]
    releaseDate: DateFilter
    startReleaseDate: DateFilter
    title: StringFilter
    updatedAt: DateFilter
    videoId: NumberFilter
}

input SeriesSort {
    accessMode: SortOptions
    ageRestriction: SortOptions
    cover: MediaEntity_SeriesSort
    coverId: SortOptions
    createdAt: SortOptions
    description: SortOptions
    endReleaseDate: SortOptions
    genresConnection: MovieGenreEntity_SeriesSort
    id: SortOptions
    releaseDate: SortOptions
    startReleaseDate: SortOptions
    title: SortOptions
    updatedAt: SortOptions
    videoId: SortOptions
}

input SortOptions {
    direction: SortDirectionEnum
    nulls: SortNullsEnum
}

input StringFilter {
    eq: String
    ilike: String
    in: [String!]
    like: String
    neq: String
    nilike: String
    nin: [String!]
    nlike: String
}

input StudioFilter {
    and: [StudioFilter!]
    id: IDFilter
    name: StringFilter
    or: [StudioFilter!]
}

input StudioSort {
    id: SortOptions
    name: SortOptions
}

input TrailerFilter {
    and: [TrailerFilter!]
    createdAt: DateFilter
    id: IDFilter
    movieId: StringFilter
    or: [TrailerFilter!]
    title: StringFilter
    videoId: NumberFilter
}

input TrailerSort {
    createdAt: SortOptions
    id: SortOptions
    movieId: SortOptions
    title: SortOptions
    videoId: SortOptions
}

input UpdateCollectionInput {
    coverId: Float
    description: String
    isSystem: Boolean
    name: String
}

input UpdateCountryInput {
    currencyId: String
    id: String
    languageId: String
    name: String
}

input UpdateCurrencyInput {
    id: String!
    name: String!
    symbol: String!
}

input UpdateEpisodeInput {
    accessMode: AccessModeEnum
    ageRestriction: AgeRestrictionEnum
    description: String
    numberInSeason: Float
    numberInSeries: Float
    releaseDate: DateTime
    seasonId: String
    seriesId: String
    title: String
    videoId: Float
}

input UpdateFilmInput {
    accessMode: AccessModeEnum
    ageRestriction: AgeRestrictionEnum
    coverId: Float
    description: String
    releaseDate: DateTime
    title: String
    videoId: Float
}

input UpdateGenreInput {
    name: String
}

input UpdateLanguageInput {
    id: String
    name: String
}

input UpdateMovieImageInput {
    imageId: Float
    movieId: String
    typeId: Float
}

input UpdateMovieImageTypeInput {
    name: String
}

input UpdateMoviePersonInput {
    movieId: String
    personId: Int
    role: String
    typeId: Int
}

input UpdateMoviePersonTypeInput {
    name: String
}

input UpdateMovieReviewInput {
    mark: Int
    movieId: String
    text: String
}

input UpdateMovieUserInput {
    isBookmarked: Boolean
    isWatched: Boolean
    movieId: ID
}

input UpdatePersonInput {
    countryId: String
    imageId: String
    name: String
}

input UpdateRoomInput {
    name: String
}

input UpdateSeasonInput {
    accessMode: AccessModeEnum
    ageRestriction: AgeRestrictionEnum
    description: String
    endReleaseDate: DateTime
    numberInSeries: Float
    seriesId: String
    startReleaseDate: DateTime
    title: String
}

input UpdateSeriesInput {
    accessMode: AccessModeEnum
    ageRestriction: AgeRestrictionEnum
    coverId: Float
    description: String
    endReleaseDate: DateTime
    startReleaseDate: DateTime
    title: String
}

input UpdateStudioInput {
    name: String
}

input UpdateSubtitlesInput {
    fileId: Int
    languageId: String
    videoId: Int
}

input UpdateTrailerInput {
    movieId: String
    title: String
    videoId: Float
}

input UpdateUserInput {
    avatarId: Float
    countryId: String
    email: String
    name: String
}

input UpdateVideoVariantInput {
    fileId: Int
    languageId: String
    quality: VideoQualityEnum
    videoId: Int
}

input UserFilter {
    and: [UserFilter!]
    avatarId: NumberFilter
    countryId: StringFilter
    createdAt: DateFilter
    email: StringFilter
    id: IDFilter
    isEmailConfirmed: BooleanFilter
    name: StringFilter
    or: [UserFilter!]
    role: RoleEnumFilter
    updatedAt: DateFilter
}

input UserSort {
    avatarId: SortOptions
    countryId: SortOptions
    createdAt: SortOptions
    email: SortOptions
    id: SortOptions
    isEmailConfirmed: SortOptions
    name: SortOptions
    role: SortOptions
    updatedAt: SortOptions
}

input VideoFilter {
    and: [VideoFilter!]
    id: IDFilter
    or: [VideoFilter!]
}

input VideoSort {
    id: SortOptions
}

input Video_CreateSubtitlesInput {
    fileId: Int!
    languageId: String!
}

input Video_CreateVideoVariantInput {
    fileId: Int!
    languageId: String!
    quality: VideoQualityEnum!
}
